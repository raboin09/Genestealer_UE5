
protected:
	float Time;
	
	////////////////////////
	/// DEFAULTS
	////////////////////////
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float TurnStartThreshold;

	////////////////////////
	/// OVERRIDES
	////////////////////////
	
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float bForceOrientToMovement;
	
	////////////////////////
	/// INPUT
	////////////////////////

	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MovingSidewaysInput;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MovingForwardInput;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float AnalogInputScale;
	
	////////////////////////
	/// CHARACTER
	////////////////////////

	// Initials
	UPROPERTY(BlueprintReadOnly, Category="Genestealer")
	ABaseCharacter* CharacterRef;
	UPROPERTY(BlueprintReadOnly, Category="Genestealer")
	UCharacterMovementComponent* CharacterMovementComponentRef;

	// Ongoing
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	FVector CharacterLocation;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float ControlRotationYaw;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float ActorWorldRotationYaw;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float PlayerAimYawUnclamped;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float PlayerAimPitch;
	
	////////////////////////
	// LOCOMOTION
	////////////////////////

	// Initials
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float InitialMaxAcceleration;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float InitialRotationRate;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float InitialSprintMaxSpeed;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float InitialRunMaxSpeed;

	// Ongoing
	bool bIsInAir;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bSprinting;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bWalking;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bAiming;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bCrouching;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bCharacterOrientedToStrafingMovement;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bPlayerUsingStrafingMovement;

	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MovementVelocity;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MaxAcceleration;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float CurrentAcceleration;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float CurrentAccelerationScale;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float CurrentLocalMovingAngle;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float LastFrameLocalMovingAngle;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float DesiredLocalMovingDirection;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MovementInputYawAngleWorldSpace;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MoveForwardScale;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float MoveRightScale;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	float JogLeaningDirection;

	////////////////////////
	/// COVER
	////////////////////////

	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bUsingCover;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bIsPlayerHoldingShotKey;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bInCoverFacingRight;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bInCoverMovingRight;
	UPROPERTY(BlueprintReadOnly, EditDefaultsOnly, Category="Genestealer")
	bool bIsInMirroredAiming;
	
private:

	void Internal_AccelerationUpdate();
	void Internal_RotationRateUpdate();
	
	FORCEINLINE float GetControllerYawDelta() const { return UKismetMathLibrary::NormalizedDeltaRotator({0.f, ControlRotationYaw, 0.f}, {0.f, ActorWorldRotationYaw, 0.f}).Yaw; }
	FORCEINLINE bool HasForwardMomentum() const { return HasInput() && HasMovementVelocity() && HasAcceleration();  }
	FORCEINLINE bool HasAcceleration(const float MinThreshold = 0.f) const { return CurrentAcceleration > MinThreshold; }
	FORCEINLINE bool IsMovementVelocityInRange(const float Min, const float Max) const { return UKismetMathLibrary::InRange_FloatFloat(MovementVelocity, Min, Max, false, true);}
	FORCEINLINE bool HasMovementVelocity(const float MinThreshold = 0.f) const { return MovementVelocity > MinThreshold; }
	FORCEINLINE bool HasInput(const float MinThreshold = 0.f) const { return AnalogInputScale > MinThreshold; }
	
protected:
	UFUNCTION(BlueprintPure)
	FORCEINLINE bool ShouldTurnInPlace() const { return UKismetMathLibrary::Abs(GetControllerYawDelta()) > TurnStartThreshold; }
	UFUNCTION(BlueprintPure)
	FORCEINLINE float IsYawDeltaInRange(const float Min, const float Max) const { return UKismetMathLibrary::InRange_FloatFloat(GetControllerYawDelta(), Min, Max) ? 1.f : 0.f; }
	
	///////////////////////////
	/// LOCOMOTION TRANSITIONS
	///////////////////////////
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_ToIdle(int32 MachineIndex, int32 StateIndex);
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_FromIdle(int32 MachineIndex, int32 StateIndex);
	
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_ToJogStart(int32 MachineIndex, int32 StateIndex);
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_FromJogStart(int32 MachineIndex, int32 StateIndex);

	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_ToJogStop(int32 MachineIndex, int32 StateIndex);
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_FromJogStop(int32 MachineIndex, int32 StateIndex);
	
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_ToJogWalkLocomotion(int32 MachineIndex, int32 StateIndex);
	UFUNCTION(BlueprintPure, meta = (BlueprintInternalUseOnly="true", AnimGetter="true", BlueprintThreadSafe))
	bool AssertLocomotion_FromJogWalkLocomotion(int32 MachineIndex, int32 StateIndex);